{
  "index.html": {
    "file": {
      "contents": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>React in WebContainer</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.tsx\"></script>\n  </body>\n</html> "
    }
  },
  "package.json": {
    "file": {
      "contents": "{\n  \"name\": \"react-template\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite --port 3000\",\n    \"build\": \"vite build\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"class-variance-authority\": \"^0.7.0\",\n    \"clsx\": \"^2.0.0\",\n    \"tailwind-merge\": \"^2.0.0\",\n    \"lucide-react\": \"^0.294.0\",\n    \"tailwindcss-animate\": \"^1.0.7\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.10.0\",\n    \"@types/react\": \"^18.2.39\",\n    \"@types/react-dom\": \"^18.2.17\",\n    \"@vitejs/plugin-react\": \"^4.2.0\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"postcss\": \"^8.4.31\",\n    \"tailwindcss\": \"^3.3.5\",\n    \"typescript\": \"^5.3.2\",\n    \"vite\": \"^5.0.2\"\n  }\n}\n"
    }
  },
  "postcss.config.js": {
    "file": {
      "contents": "module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n} "
    }
  },
  "react-renderer.js": {
    "file": {
      "contents": "/**\n * React Renderer for WebContainer\n * \n * This utility helps render React components inside the WebContainer.\n * It provides functionality to:\n * 1. Load a Vite+React development server\n * 2. Create or modify React components dynamically\n * 3. Render components with props\n */\n\n// Function to create a simple React app in the WebContainer\nasync function createReactApp(webcontainer, files = {}) {\n  console.log(\"Setting up React in WebContainer...\");\n  \n  // Default files needed for a minimal React app with Vite\n  const defaultFiles = {\n    \"package.json\": {\n      file: {\n        contents: JSON.stringify({\n          name: \"react-webcontainer\",\n          private: true,\n          version: \"0.0.0\",\n          type: \"module\",\n          scripts: {\n            \"dev\": \"vite\",\n            \"build\": \"vite build\",\n            \"preview\": \"vite preview\"\n          },\n          dependencies: {\n            \"react\": \"^18.2.0\",\n            \"react-dom\": \"^18.2.0\",\n            \"class-variance-authority\": \"^0.7.0\",\n            \"clsx\": \"^2.0.0\",\n            \"tailwind-merge\": \"^2.0.0\",\n            \"lucide-react\": \"^0.292.0\",\n            \"tailwindcss-animate\": \"^1.0.7\"\n          },\n          devDependencies: {\n            \"@types/node\": \"^20.8.10\",\n            \"@types/react\": \"^18.2.15\",\n            \"@types/react-dom\": \"^18.2.7\",\n            \"@vitejs/plugin-react\": \"^4.0.3\",\n            \"autoprefixer\": \"^10.4.16\",\n            \"postcss\": \"^8.4.31\",\n            \"tailwindcss\": \"^3.3.5\",\n            \"typescript\": \"^5.0.2\",\n            \"vite\": \"^4.4.5\"\n          }\n        })\n      }\n    },\n    \"vite.config.js\": {\n      file: {\n        contents: `\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n  server: {\n    host: true,\n  },\n});\n`\n      }\n    },\n    \"src/main.jsx\": {\n      file: {\n        contents: `\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './index.css';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\n`\n      }\n    },\n    \"src/App.jsx\": {\n      file: {\n        contents: `\nimport { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-md p-6 bg-white border rounded-lg shadow-sm\">\n        <h1 className=\"text-2xl font-bold mb-4\">React in WebContainer</h1>\n        <p className=\"text-gray-500 mb-4\">This is a simple React app running in a WebContainer</p>\n        \n        <div className=\"flex flex-col gap-4\">\n          <p className=\"text-center text-2xl font-bold\">{count}</p>\n          <div className=\"flex gap-4\">\n            <button \n              onClick={() => setCount(count - 1)}\n              className=\"px-4 py-2 border rounded hover:bg-gray-100\"\n            >\n              Decrement\n            </button>\n            <button \n              onClick={() => setCount(count + 1)}\n              className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n            >\n              Increment\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n`\n      }\n    },\n    \"src/App.css\": {\n      file: {\n        contents: `\n/* App-specific styles */\n`\n      }\n    },\n    \"src/index.css\": {\n      file: {\n        contents: `\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n \n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n \n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n \n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n \n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n \n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n \n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n \n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n \n    --radius: 0.5rem;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n`\n      }\n    },\n    \"index.html\": {\n      file: {\n        contents: `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>React in WebContainer</title>\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script type=\"module\" src=\"/src/main.jsx\"></script>\n  </body>\n</html>\n`\n      }\n    },\n    \"tailwind.config.js\": {\n      file: {\n        contents: `\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{js,jsx}',\n    './components/**/*.{js,jsx}',\n    './app/**/*.{js,jsx}',\n    './src/**/*.{js,jsx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n}\n`\n      }\n    },\n    \"postcss.config.js\": {\n      file: {\n        contents: `\nmodule.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n`\n      }\n    }\n  };\n\n  // Merge provided files with default files (user files take precedence)\n  const mergedFiles = { ...defaultFiles, ...files };\n\n  try {\n    // Mount the files to the WebContainer\n    await webcontainer.mount(mergedFiles);\n    console.log(\"React files mounted successfully\");\n\n    // Install dependencies\n    const installProcess = await webcontainer.spawn(\"npm\", [\"install\"]);\n    \n    // Create a logging stream for the installation process\n    installProcess.output.pipeTo(\n      new WritableStream({\n        write(chunk) {\n          console.log(\"[React Install]\", chunk.toString());\n        },\n      })\n    );\n    \n    // Wait for the installation to complete\n    const installExitCode = await installProcess.exit;\n    \n    if (installExitCode !== 0) {\n      throw new Error(`Installation failed with code ${installExitCode}`);\n    }\n    \n    console.log(\"Dependencies installed successfully\");\n    \n    // Start the development server\n    const devProcess = await webcontainer.spawn(\"npm\", [\"run\", \"dev\"]);\n    \n    // Create a logging stream for the development server\n    devProcess.output.pipeTo(\n      new WritableStream({\n        write(chunk) {\n          console.log(\"[React Dev Server]\", chunk.toString());\n        },\n      })\n    );\n    \n    // Wait for the server to be available\n    const devServerUrl = await waitForDevServer(webcontainer);\n    console.log(\"React dev server started at:\", devServerUrl);\n    \n    return {\n      url: devServerUrl,\n      webcontainer\n    };\n  } catch (error) {\n    console.error(\"Error setting up React in WebContainer:\", error);\n    throw error;\n  }\n}\n\n// Helper function to wait for the dev server to be available\nasync function waitForDevServer(webcontainer) {\n  // Wait for server.js to be created by Vite\n  const serverFile = await new Promise((resolve) => {\n    const checkFile = async () => {\n      try {\n        const serverJs = await webcontainer.fs.readFile(\"node_modules/.vite/server.js\", \"utf-8\");\n        if (serverJs) {\n          resolve(serverJs);\n        } else {\n          setTimeout(checkFile, 100);\n        }\n      } catch (error) {\n        setTimeout(checkFile, 100);\n      }\n    };\n    checkFile();\n  });\n  \n  // Try to get the server URL from the logs\n  return \"http://localhost:5173\";\n}\n\n// Function to create or update a React component\nasync function createComponent(webcontainer, componentName, componentCode) {\n  try {\n    const componentPath = `src/components/${componentName}.jsx`;\n    \n    // Ensure the components directory exists\n    try {\n      await webcontainer.fs.mkdir(\"src/components\", { recursive: true });\n    } catch (error) {\n      // Directory might already exist, ignore this error\n      console.log(\"Components directory might already exist\");\n    }\n    \n    // Write the component file\n    await webcontainer.fs.writeFile(componentPath, componentCode);\n    console.log(`Component ${componentName} created successfully`);\n    \n    return true;\n  } catch (error) {\n    console.error(`Error creating component ${componentName}:`, error);\n    return false;\n  }\n}\n\n// Function to create a dynamic App file that imports and renders a specified component\nasync function updateAppToRenderComponent(webcontainer, componentName, props = {}) {\n  try {\n    const appCode = `\nimport { useState } from 'react';\nimport './App.css';\nimport ${componentName} from './components/${componentName}';\n\nfunction App() {\n  // Convert props to a JSON string for debugging\n  const propsString = JSON.stringify(${JSON.stringify(props)}, null, 2);\n  \n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center bg-background p-4\">\n      <div className=\"w-full max-w-3xl\">\n        {/* Render the dynamic component with provided props */}\n        <${componentName} ${Object.entries(props)\n          .map(([key, value]) => {\n            if (typeof value === 'string') {\n              return `${key}=\"${value}\"`;\n            } else if (typeof value === 'boolean') {\n              return value ? `${key}` : '';\n            } else {\n              return `${key}={${JSON.stringify(value)}}`;\n            }\n          })\n          .join(' ')} />\n        \n        {/* Debug info (only in development) */}\n        <div className=\"mt-8 p-4 bg-gray-100 rounded-lg text-xs\">\n          <details>\n            <summary className=\"cursor-pointer font-bold\">Component Props Debug</summary>\n            <pre className=\"mt-2 whitespace-pre-wrap\">{propsString}</pre>\n          </details>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n`;\n\n    // Write the updated App file\n    await webcontainer.fs.writeFile(\"src/App.jsx\", appCode);\n    console.log(`App.jsx updated to render ${componentName}`);\n    \n    return true;\n  } catch (error) {\n    console.error(\"Error updating App.jsx:\", error);\n    return false;\n  }\n}\n\nmodule.exports = {\n  createReactApp,\n  createComponent,\n  updateAppToRenderComponent\n}; "
    }
  },
  "src/App.css": {
    "file": {
      "contents": "/* App-specific styles can be added here */ "
    }
  },
  "src/App.tsx": {
    "file": {
      "contents": "import { useState } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"./components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"./components/ui/card\";\nimport { Input } from \"./components/ui/input\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>React in WebContainer</CardTitle>\n          <CardDescription>\n            This is a simple React app running in a WebContainer\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col gap-4\">\n            <p className=\"text-center text-2xl font-bold\">{count}</p>\n            <div className=\"flex gap-2\">\n              <Input\n                type=\"number\"\n                value={count.toString()}\n                onChange={(e) => setCount(Number(e.target.value))}\n                className=\"text-center\"\n              />\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter className=\"flex justify-between\">\n          <Button variant=\"outline\" onClick={() => setCount(count - 1)}>\n            Decrement\n          </Button>\n          <Button onClick={() => setCount(count + 1)}>Increment</Button>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n"
    }
  },
  "src/components/ui/button.tsx": {
    "file": {
      "contents": "import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n"
    }
  },
  "src/components/ui/card.tsx": {
    "file": {
      "contents": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n"
    }
  },
  "src/components/ui/input.tsx": {
    "file": {
      "contents": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n"
    }
  },
  "src/index.css": {
    "file": {
      "contents": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n \n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n \n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n \n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n \n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n \n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n \n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n \n    --radius: 0.5rem;\n  }\n \n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n \n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n \n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n \n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n \n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n \n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n \n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n \n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n \n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n  }\n}\n \n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n} "
    }
  },
  "src/lib/utils.ts": {
    "file": {
      "contents": "import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n"
    }
  },
  "src/main.tsx": {
    "file": {
      "contents": "import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.tsx\";\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"
    }
  },
  "tailwind.config.js": {
    "file": {
      "contents": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  darkMode: [\"class\"],\n  content: [\n    './pages/**/*.{ts,tsx}',\n    './components/**/*.{ts,tsx}',\n    './app/**/*.{ts,tsx}',\n    './src/**/*.{ts,tsx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: \"2rem\",\n      screens: {\n        \"2xl\": \"1400px\",\n      },\n    },\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: 0 },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: 0 },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n} "
    }
  },
  "tsconfig.json": {
    "file": {
      "contents": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"module\": \"ESNext\",\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \n    /* Paths */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n} "
    }
  },
  "tsconfig.node.json": {
    "file": {
      "contents": "{\n  \"compilerOptions\": {\n    \"composite\": true,\n    \"skipLibCheck\": true,\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"bundler\",\n    \"allowSyntheticDefaultImports\": true\n  },\n  \"include\": [\"vite.config.ts\"]\n} "
    }
  },
  "vite.config.ts": {
    "file": {
      "contents": "import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n  server: {\n    host: true,\n  },\n});\n"
    }
  },
  "README.md": {
    "file": {
      "contents": "# React in WebContainer Template\n      \nThis is a minimal Vite + React + shadcn/ui template that can be loaded into a WebContainer.\n\n## Features\n- React 18\n- TypeScript\n- Vite for fast rebuilds\n- Tailwind CSS for styling\n- shadcn/ui components\n- Hot Module Replacement\n\n## Getting Started\nRun the development server:\n\n```\nnpm install\nnpm run dev\n```\n"
    }
  }
}